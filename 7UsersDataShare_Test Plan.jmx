<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.2.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">/Users/arpitha.joshi/chromedriver</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">true</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">
          <stringProp name="WebDriverSampler.script">  //driver.get(&quot;https://dev.id.prodigylabs.net/&quot;);
 // driver.findElement(By.xpath(&quot;//button[@type=&apos;button&apos;]&quot;)).click();
    //driver.findElement(By.xpath(&quot;//img[contains(@src,&apos;https://st-content.stg.verified.me/referenceData/image/brmmenqs9FplPEUj8DoV-JQl5SrytqzTnPKtZJBVFLQ&apos;)]&quot;)).click();
    //driver.findElement(By.id(&quot;userid&quot;)).click();
    //driver.findElement(By.id(&quot;userid&quot;)).clear();
    //driver.findElement(By.id(&quot;userid&quot;)).sendKeys(&quot;terence.hong@prodigylabs.net&quot;);
    //driver.findElement(By.id(&quot;password&quot;)).clear();
    //driver.findElement(By.id(&quot;password&quot;)).sendKeys(&quot;password&quot;);
    //driver.findElement(By.id(&quot;login&quot;)).click();
    //driver.findElement(By.xpath(&quot;//div[2]/button&quot;)).click();
    //driver.findElement(By.id(&quot;consent_ok&quot;)).click();
    //driver.findElement(By.cssSelector(&quot;svg.c-dap-overview-expander-button__icon.c-small-icon&quot;)).click();
    //driver.findElement(By.xpath(&quot;//button[@id=&apos;license__button-agree&apos;]/span&quot;)).click();
  




WDS.sampleResult.sampleStart()

var username = WDS.args[0].split(&apos;,&apos;)[0];
var password = WDS.args[0].split(&apos;,&apos;)[1];

//var userName = WDS.browser.findElement(pkg.By.id(&apos;Login_txtUserName&apos;)).sendKeys([WDS.args[0]])
//var userPwd = WDS.browser.findElement(pkg.By.id(&apos;Login_txtPassword&apos;)).sendKeys([WDS.args[1])


//WDS.log.info(username); 

WDS.browser.get(&quot;https://dev.id.prodigylabs.net&quot;);
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//button[@type=&apos;button&apos;]&quot;)).click();
var timeunit = java.util.concurrent.TimeUnit
WDS.browser.manage().timeouts().implicitlyWait(60, timeunit.SECONDS);
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//img[contains(@src,&apos;https://st-content.stg.verified.me/referenceData/image/brmmenqs9FplPEUj8DoV-JQl5SrytqzTnPKtZJBVFLQ&apos;)]&quot;)).click();
WDS.browser.findElement(org.openqa.selenium.By.id(&quot;userid&quot;)).click();
WDS.browser.findElement(org.openqa.selenium.By.id(&quot;userid&quot;)).clear();
var username = WDS.browser.findElement(org.openqa.selenium.By.id(&quot;userid&quot;)).sendKeys(username);

WDS.browser.findElement(org.openqa.selenium.By.id(&quot;password&quot;)).click();
WDS.browser.findElement(org.openqa.selenium.By.id(&quot;password&quot;)).clear();
var password = WDS.browser.findElement(org.openqa.selenium.By.id(&quot;password&quot;)).sendKeys(password);
WDS.browser.findElement(org.openqa.selenium.By.id(&quot;login&quot;)).click();

//WDS.log.info(WDS.browser.getPageSource());

WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//button[@class=&apos;vme-button clickable vme-button--orange&apos;]&quot;)).click();

WDS.browser.findElement(org.openqa.selenium.By.id(&quot;consent_ok&quot;)).click();
WDS.browser.findElement(org.openqa.selenium.By.cssSelector(&quot;svg.c-dap-overview-expander-button__icon.c-small-icon &gt; use&quot;)).click();
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//button[@id=&apos;license__button-agree&apos;]/span&quot;)).click();

WDS.sampleResult.sampleEnd()


//var searchBox = WDS.browser.findElement(org.openqa.selenium.By.name(&quot;q&quot;));
//searchBox.sendKeys(&quot;automation&quot;);
//searchBox.sendKeys(org.openqa.selenium.Keys.ENTER);
//WDS.browser.findElement(By.name(&quot;q&quot;)).sendKeys(&quot;automation&quot;);
//WDS.browser.findElement(By.id(&quot;tsf&quot;)).submit();</stringProp>
          <stringProp name="WebDriverSampler.parameters">alain.benabdallah@prodigylabs.net,password </stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart()
WDS.browser.get(&apos;http://jmeter-plugins.org&apos;)
WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">
          <stringProp name="WebDriverSampler.script">  //driver.get(&quot;https://dev.id.prodigylabs.net/&quot;);
 // driver.findElement(By.xpath(&quot;//button[@type=&apos;button&apos;]&quot;)).click();
    //driver.findElement(By.xpath(&quot;//img[contains(@src,&apos;https://st-content.stg.verified.me/referenceData/image/brmmenqs9FplPEUj8DoV-JQl5SrytqzTnPKtZJBVFLQ&apos;)]&quot;)).click();
    //driver.findElement(By.id(&quot;userid&quot;)).click();
    //driver.findElement(By.id(&quot;userid&quot;)).clear();
    //driver.findElement(By.id(&quot;userid&quot;)).sendKeys(&quot;terence.hong@prodigylabs.net&quot;);
    //driver.findElement(By.id(&quot;password&quot;)).clear();
    //driver.findElement(By.id(&quot;password&quot;)).sendKeys(&quot;password&quot;);
    //driver.findElement(By.id(&quot;login&quot;)).click();
    //driver.findElement(By.xpath(&quot;//div[2]/button&quot;)).click();
    //driver.findElement(By.id(&quot;consent_ok&quot;)).click();
    //driver.findElement(By.cssSelector(&quot;svg.c-dap-overview-expander-button__icon.c-small-icon&quot;)).click();
    //driver.findElement(By.xpath(&quot;//button[@id=&apos;license__button-agree&apos;]/span&quot;)).click();
  




WDS.sampleResult.sampleStart()

var username = WDS.args[0].split(&apos;,&apos;)[0];
var password = WDS.args[0].split(&apos;,&apos;)[1];

//var userName = WDS.browser.findElement(pkg.By.id(&apos;Login_txtUserName&apos;)).sendKeys([WDS.args[0]])
//var userPwd = WDS.browser.findElement(pkg.By.id(&apos;Login_txtPassword&apos;)).sendKeys([WDS.args[1])


//WDS.log.info(username); 

WDS.browser.get(&quot;https://dev.id.prodigylabs.net&quot;);
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//button[@type=&apos;button&apos;]&quot;)).click();
var timeunit = java.util.concurrent.TimeUnit
WDS.browser.manage().timeouts().implicitlyWait(60, timeunit.SECONDS);
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//img[contains(@src,&apos;https://st-content.stg.verified.me/referenceData/image/brmmenqs9FplPEUj8DoV-JQl5SrytqzTnPKtZJBVFLQ&apos;)]&quot;)).click();
WDS.browser.findElement(org.openqa.selenium.By.id(&quot;userid&quot;)).click();
WDS.browser.findElement(org.openqa.selenium.By.id(&quot;userid&quot;)).clear();
var username = WDS.browser.findElement(org.openqa.selenium.By.id(&quot;userid&quot;)).sendKeys(username);

WDS.browser.findElement(org.openqa.selenium.By.id(&quot;password&quot;)).click();
WDS.browser.findElement(org.openqa.selenium.By.id(&quot;password&quot;)).clear();
var password = WDS.browser.findElement(org.openqa.selenium.By.id(&quot;password&quot;)).sendKeys(password);
WDS.browser.findElement(org.openqa.selenium.By.id(&quot;login&quot;)).click();

//WDS.log.info(WDS.browser.getPageSource());

WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//button[@class=&apos;vme-button clickable vme-button--orange&apos;]&quot;)).click();

WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//button[@id=&apos;consent_ok&apos;]&quot;)).click();
WDS.browser.findElement(org.openqa.selenium.By.cssSelector(&quot;svg.c-dap-overview-expander-button__icon.c-small-icon &gt; use&quot;)).click();
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//button[@id=&apos;license__button-agree&apos;]/span&quot;)).click();

WDS.sampleResult.sampleEnd()


//var searchBox = WDS.browser.findElement(org.openqa.selenium.By.name(&quot;q&quot;));
//searchBox.sendKeys(&quot;automation&quot;);
//searchBox.sendKeys(org.openqa.selenium.Keys.ENTER);
//WDS.browser.findElement(By.name(&quot;q&quot;)).sendKeys(&quot;automation&quot;);
//WDS.browser.findElement(By.id(&quot;tsf&quot;)).submit();</stringProp>
          <stringProp name="WebDriverSampler.parameters">terence.hong@prodigylabs.net,password </stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path"></stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">/Users/arpitha.joshi/chromedriver</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">true</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">
          <stringProp name="WebDriverSampler.script">  //driver.get(&quot;https://dev.id.prodigylabs.net/&quot;);
 // driver.findElement(By.xpath(&quot;//button[@type=&apos;button&apos;]&quot;)).click();
    //driver.findElement(By.xpath(&quot;//img[contains(@src,&apos;https://st-content.stg.verified.me/referenceData/image/brmmenqs9FplPEUj8DoV-JQl5SrytqzTnPKtZJBVFLQ&apos;)]&quot;)).click();
    //driver.findElement(By.id(&quot;userid&quot;)).click();
    //driver.findElement(By.id(&quot;userid&quot;)).clear();
    //driver.findElement(By.id(&quot;userid&quot;)).sendKeys(&quot;terence.hong@prodigylabs.net&quot;);
    //driver.findElement(By.id(&quot;password&quot;)).clear();
    //driver.findElement(By.id(&quot;password&quot;)).sendKeys(&quot;password&quot;);
    //driver.findElement(By.id(&quot;login&quot;)).click();
    //driver.findElement(By.xpath(&quot;//div[2]/button&quot;)).click();
    //driver.findElement(By.id(&quot;consent_ok&quot;)).click();
    //driver.findElement(By.cssSelector(&quot;svg.c-dap-overview-expander-button__icon.c-small-icon&quot;)).click();
    //driver.findElement(By.xpath(&quot;//button[@id=&apos;license__button-agree&apos;]/span&quot;)).click();
  




WDS.sampleResult.sampleStart()

var username = WDS.args[0].split(&apos;,&apos;)[0];
var password = WDS.args[0].split(&apos;,&apos;)[1];

//var userName = WDS.browser.findElement(pkg.By.id(&apos;Login_txtUserName&apos;)).sendKeys([WDS.args[0]])
//var userPwd = WDS.browser.findElement(pkg.By.id(&apos;Login_txtPassword&apos;)).sendKeys([WDS.args[1])


//WDS.log.info(username); 

WDS.browser.get(&quot;https://dev.id.prodigylabs.net&quot;);
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//button[@type=&apos;button&apos;]&quot;)).click();
var timeunit = java.util.concurrent.TimeUnit
WDS.browser.manage().timeouts().implicitlyWait(60, timeunit.SECONDS);
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//img[contains(@src,&apos;https://st-content.stg.verified.me/referenceData/image/brmmenqs9FplPEUj8DoV-JQl5SrytqzTnPKtZJBVFLQ&apos;)]&quot;)).click();
WDS.browser.findElement(org.openqa.selenium.By.id(&quot;userid&quot;)).click();
WDS.browser.findElement(org.openqa.selenium.By.id(&quot;userid&quot;)).clear();
var username = WDS.browser.findElement(org.openqa.selenium.By.id(&quot;userid&quot;)).sendKeys(username);

WDS.browser.findElement(org.openqa.selenium.By.id(&quot;password&quot;)).click();
WDS.browser.findElement(org.openqa.selenium.By.id(&quot;password&quot;)).clear();
var password = WDS.browser.findElement(org.openqa.selenium.By.id(&quot;password&quot;)).sendKeys(password);
WDS.browser.findElement(org.openqa.selenium.By.id(&quot;login&quot;)).click();

//WDS.log.info(WDS.browser.getPageSource());

WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//button[@class=&apos;vme-button clickable vme-button--orange&apos;]&quot;)).click();

WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//button[@id=&apos;consent_ok&apos;]&quot;)).click();
WDS.browser.findElement(org.openqa.selenium.By.cssSelector(&quot;svg.c-dap-overview-expander-button__icon.c-small-icon &gt; use&quot;)).click();
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//button[@id=&apos;license__button-agree&apos;]/span&quot;)).click();

WDS.sampleResult.sampleEnd()


//var searchBox = WDS.browser.findElement(org.openqa.selenium.By.name(&quot;q&quot;));
//searchBox.sendKeys(&quot;automation&quot;);
//searchBox.sendKeys(org.openqa.selenium.Keys.ENTER);
//WDS.browser.findElement(By.name(&quot;q&quot;)).sendKeys(&quot;automation&quot;);
//WDS.browser.findElement(By.id(&quot;tsf&quot;)).submit();</stringProp>
          <stringProp name="WebDriverSampler.parameters">mike.morrison@prodigylabs.net,password </stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">
          <stringProp name="WebDriverSampler.script">  //driver.get(&quot;https://dev.id.prodigylabs.net/&quot;);
 // driver.findElement(By.xpath(&quot;//button[@type=&apos;button&apos;]&quot;)).click();
    //driver.findElement(By.xpath(&quot;//img[contains(@src,&apos;https://st-content.stg.verified.me/referenceData/image/brmmenqs9FplPEUj8DoV-JQl5SrytqzTnPKtZJBVFLQ&apos;)]&quot;)).click();
    //driver.findElement(By.id(&quot;userid&quot;)).click();
    //driver.findElement(By.id(&quot;userid&quot;)).clear();
    //driver.findElement(By.id(&quot;userid&quot;)).sendKeys(&quot;terence.hong@prodigylabs.net&quot;);
    //driver.findElement(By.id(&quot;password&quot;)).clear();
    //driver.findElement(By.id(&quot;password&quot;)).sendKeys(&quot;password&quot;);
    //driver.findElement(By.id(&quot;login&quot;)).click();
    //driver.findElement(By.xpath(&quot;//div[2]/button&quot;)).click();
    //driver.findElement(By.id(&quot;consent_ok&quot;)).click();
    //driver.findElement(By.cssSelector(&quot;svg.c-dap-overview-expander-button__icon.c-small-icon&quot;)).click();
    //driver.findElement(By.xpath(&quot;//button[@id=&apos;license__button-agree&apos;]/span&quot;)).click();
  




WDS.sampleResult.sampleStart()

var username = WDS.args[0].split(&apos;,&apos;)[0];
var password = WDS.args[0].split(&apos;,&apos;)[1];

//var userName = WDS.browser.findElement(pkg.By.id(&apos;Login_txtUserName&apos;)).sendKeys([WDS.args[0]])
//var userPwd = WDS.browser.findElement(pkg.By.id(&apos;Login_txtPassword&apos;)).sendKeys([WDS.args[1])


//WDS.log.info(username); 

WDS.browser.get(&quot;https://dev.id.prodigylabs.net&quot;);
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//button[@type=&apos;button&apos;]&quot;)).click();
var timeunit = java.util.concurrent.TimeUnit
WDS.browser.manage().timeouts().implicitlyWait(60, timeunit.SECONDS);
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//img[contains(@src,&apos;https://st-content.stg.verified.me/referenceData/image/brmmenqs9FplPEUj8DoV-JQl5SrytqzTnPKtZJBVFLQ&apos;)]&quot;)).click();
WDS.browser.findElement(org.openqa.selenium.By.id(&quot;userid&quot;)).click();
WDS.browser.findElement(org.openqa.selenium.By.id(&quot;userid&quot;)).clear();
var username = WDS.browser.findElement(org.openqa.selenium.By.id(&quot;userid&quot;)).sendKeys(username);

WDS.browser.findElement(org.openqa.selenium.By.id(&quot;password&quot;)).click();
WDS.browser.findElement(org.openqa.selenium.By.id(&quot;password&quot;)).clear();
var password = WDS.browser.findElement(org.openqa.selenium.By.id(&quot;password&quot;)).sendKeys(password);
WDS.browser.findElement(org.openqa.selenium.By.id(&quot;login&quot;)).click();

//WDS.log.info(WDS.browser.getPageSource());

WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//button[@class=&apos;vme-button clickable vme-button--orange&apos;]&quot;)).click();

WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//button[@id=&apos;consent_ok&apos;]&quot;)).click();
WDS.browser.findElement(org.openqa.selenium.By.cssSelector(&quot;svg.c-dap-overview-expander-button__icon.c-small-icon &gt; use&quot;)).click();
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//button[@id=&apos;license__button-agree&apos;]/span&quot;)).click();

WDS.sampleResult.sampleEnd()


//var searchBox = WDS.browser.findElement(org.openqa.selenium.By.name(&quot;q&quot;));
//searchBox.sendKeys(&quot;automation&quot;);
//searchBox.sendKeys(org.openqa.selenium.Keys.ENTER);
//WDS.browser.findElement(By.name(&quot;q&quot;)).sendKeys(&quot;automation&quot;);
//WDS.browser.findElement(By.id(&quot;tsf&quot;)).submit();</stringProp>
          <stringProp name="WebDriverSampler.parameters">monica.torres@prodigylabs.net,password </stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path"></stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">/Users/arpitha.joshi/chromedriver</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">true</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">
          <stringProp name="WebDriverSampler.script">  //driver.get(&quot;https://dev.id.prodigylabs.net/&quot;);
 // driver.findElement(By.xpath(&quot;//button[@type=&apos;button&apos;]&quot;)).click();
    //driver.findElement(By.xpath(&quot;//img[contains(@src,&apos;https://st-content.stg.verified.me/referenceData/image/brmmenqs9FplPEUj8DoV-JQl5SrytqzTnPKtZJBVFLQ&apos;)]&quot;)).click();
    //driver.findElement(By.id(&quot;userid&quot;)).click();
    //driver.findElement(By.id(&quot;userid&quot;)).clear();
    //driver.findElement(By.id(&quot;userid&quot;)).sendKeys(&quot;terence.hong@prodigylabs.net&quot;);
    //driver.findElement(By.id(&quot;password&quot;)).clear();
    //driver.findElement(By.id(&quot;password&quot;)).sendKeys(&quot;password&quot;);
    //driver.findElement(By.id(&quot;login&quot;)).click();
    //driver.findElement(By.xpath(&quot;//div[2]/button&quot;)).click();
    //driver.findElement(By.id(&quot;consent_ok&quot;)).click();
    //driver.findElement(By.cssSelector(&quot;svg.c-dap-overview-expander-button__icon.c-small-icon&quot;)).click();
    //driver.findElement(By.xpath(&quot;//button[@id=&apos;license__button-agree&apos;]/span&quot;)).click();
  




WDS.sampleResult.sampleStart()

var username = WDS.args[0].split(&apos;,&apos;)[0];
var password = WDS.args[0].split(&apos;,&apos;)[1];

//var userName = WDS.browser.findElement(pkg.By.id(&apos;Login_txtUserName&apos;)).sendKeys([WDS.args[0]])
//var userPwd = WDS.browser.findElement(pkg.By.id(&apos;Login_txtPassword&apos;)).sendKeys([WDS.args[1])


//WDS.log.info(username); 

WDS.browser.get(&quot;https://dev.id.prodigylabs.net&quot;);
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//button[@type=&apos;button&apos;]&quot;)).click();
var timeunit = java.util.concurrent.TimeUnit
WDS.browser.manage().timeouts().implicitlyWait(60, timeunit.SECONDS);
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//img[contains(@src,&apos;https://st-content.stg.verified.me/referenceData/image/brmmenqs9FplPEUj8DoV-JQl5SrytqzTnPKtZJBVFLQ&apos;)]&quot;)).click();
WDS.browser.findElement(org.openqa.selenium.By.id(&quot;userid&quot;)).click();
WDS.browser.findElement(org.openqa.selenium.By.id(&quot;userid&quot;)).clear();
var username = WDS.browser.findElement(org.openqa.selenium.By.id(&quot;userid&quot;)).sendKeys(username);

WDS.browser.findElement(org.openqa.selenium.By.id(&quot;password&quot;)).click();
WDS.browser.findElement(org.openqa.selenium.By.id(&quot;password&quot;)).clear();
var password = WDS.browser.findElement(org.openqa.selenium.By.id(&quot;password&quot;)).sendKeys(password);
WDS.browser.findElement(org.openqa.selenium.By.id(&quot;login&quot;)).click();

//WDS.log.info(WDS.browser.getPageSource());

WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//button[@class=&apos;vme-button clickable vme-button--orange&apos;]&quot;)).click();

WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//button[@id=&apos;consent_ok&apos;]&quot;)).click();
WDS.browser.findElement(org.openqa.selenium.By.cssSelector(&quot;svg.c-dap-overview-expander-button__icon.c-small-icon &gt; use&quot;)).click();
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//button[@id=&apos;license__button-agree&apos;]/span&quot;)).click();

WDS.sampleResult.sampleEnd()


//var searchBox = WDS.browser.findElement(org.openqa.selenium.By.name(&quot;q&quot;));
//searchBox.sendKeys(&quot;automation&quot;);
//searchBox.sendKeys(org.openqa.selenium.Keys.ENTER);
//WDS.browser.findElement(By.name(&quot;q&quot;)).sendKeys(&quot;automation&quot;);
//WDS.browser.findElement(By.id(&quot;tsf&quot;)).submit();</stringProp>
          <stringProp name="WebDriverSampler.parameters">arpitha.joshi@prodigylabs.net,password </stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">/Users/arpitha.joshi/chromedriver</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">true</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">
          <stringProp name="WebDriverSampler.script">  //driver.get(&quot;https://dev.id.prodigylabs.net/&quot;);
 // driver.findElement(By.xpath(&quot;//button[@type=&apos;button&apos;]&quot;)).click();
    //driver.findElement(By.xpath(&quot;//img[contains(@src,&apos;https://st-content.stg.verified.me/referenceData/image/brmmenqs9FplPEUj8DoV-JQl5SrytqzTnPKtZJBVFLQ&apos;)]&quot;)).click();
    //driver.findElement(By.id(&quot;userid&quot;)).click();
    //driver.findElement(By.id(&quot;userid&quot;)).clear();
    //driver.findElement(By.id(&quot;userid&quot;)).sendKeys(&quot;terence.hong@prodigylabs.net&quot;);
    //driver.findElement(By.id(&quot;password&quot;)).clear();
    //driver.findElement(By.id(&quot;password&quot;)).sendKeys(&quot;password&quot;);
    //driver.findElement(By.id(&quot;login&quot;)).click();
    //driver.findElement(By.xpath(&quot;//div[2]/button&quot;)).click();
    //driver.findElement(By.id(&quot;consent_ok&quot;)).click();
    //driver.findElement(By.cssSelector(&quot;svg.c-dap-overview-expander-button__icon.c-small-icon&quot;)).click();
    //driver.findElement(By.xpath(&quot;//button[@id=&apos;license__button-agree&apos;]/span&quot;)).click();
  




WDS.sampleResult.sampleStart()

var username = WDS.args[0].split(&apos;,&apos;)[0];
var password = WDS.args[0].split(&apos;,&apos;)[1];

//var userName = WDS.browser.findElement(pkg.By.id(&apos;Login_txtUserName&apos;)).sendKeys([WDS.args[0]])
//var userPwd = WDS.browser.findElement(pkg.By.id(&apos;Login_txtPassword&apos;)).sendKeys([WDS.args[1])


//WDS.log.info(username); 

WDS.browser.get(&quot;https://dev.id.prodigylabs.net&quot;);
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//button[@type=&apos;button&apos;]&quot;)).click();
var timeunit = java.util.concurrent.TimeUnit
WDS.browser.manage().timeouts().implicitlyWait(60, timeunit.SECONDS);
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//img[contains(@src,&apos;https://st-content.stg.verified.me/referenceData/image/brmmenqs9FplPEUj8DoV-JQl5SrytqzTnPKtZJBVFLQ&apos;)]&quot;)).click();
WDS.browser.findElement(org.openqa.selenium.By.id(&quot;userid&quot;)).click();
WDS.browser.findElement(org.openqa.selenium.By.id(&quot;userid&quot;)).clear();
var username = WDS.browser.findElement(org.openqa.selenium.By.id(&quot;userid&quot;)).sendKeys(username);

WDS.browser.findElement(org.openqa.selenium.By.id(&quot;password&quot;)).click();
WDS.browser.findElement(org.openqa.selenium.By.id(&quot;password&quot;)).clear();
var password = WDS.browser.findElement(org.openqa.selenium.By.id(&quot;password&quot;)).sendKeys(password);
WDS.browser.findElement(org.openqa.selenium.By.id(&quot;login&quot;)).click();

//WDS.log.info(WDS.browser.getPageSource());

WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//button[@class=&apos;vme-button clickable vme-button--orange&apos;]&quot;)).click();

WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//button[@id=&apos;consent_ok&apos;]&quot;)).click();
WDS.browser.findElement(org.openqa.selenium.By.cssSelector(&quot;svg.c-dap-overview-expander-button__icon.c-small-icon &gt; use&quot;)).click();
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//button[@id=&apos;license__button-agree&apos;]/span&quot;)).click();

WDS.sampleResult.sampleEnd()


//var searchBox = WDS.browser.findElement(org.openqa.selenium.By.name(&quot;q&quot;));
//searchBox.sendKeys(&quot;automation&quot;);
//searchBox.sendKeys(org.openqa.selenium.Keys.ENTER);
//WDS.browser.findElement(By.name(&quot;q&quot;)).sendKeys(&quot;automation&quot;);
//WDS.browser.findElement(By.id(&quot;tsf&quot;)).submit();</stringProp>
          <stringProp name="WebDriverSampler.parameters">qacoupon@gmail.com,password </stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">/Users/arpitha.joshi/chromedriver</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">true</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">
          <stringProp name="WebDriverSampler.script">  //driver.get(&quot;https://dev.id.prodigylabs.net/&quot;);
 // driver.findElement(By.xpath(&quot;//button[@type=&apos;button&apos;]&quot;)).click();
    //driver.findElement(By.xpath(&quot;//img[contains(@src,&apos;https://st-content.stg.verified.me/referenceData/image/brmmenqs9FplPEUj8DoV-JQl5SrytqzTnPKtZJBVFLQ&apos;)]&quot;)).click();
    //driver.findElement(By.id(&quot;userid&quot;)).click();
    //driver.findElement(By.id(&quot;userid&quot;)).clear();
    //driver.findElement(By.id(&quot;userid&quot;)).sendKeys(&quot;terence.hong@prodigylabs.net&quot;);
    //driver.findElement(By.id(&quot;password&quot;)).clear();
    //driver.findElement(By.id(&quot;password&quot;)).sendKeys(&quot;password&quot;);
    //driver.findElement(By.id(&quot;login&quot;)).click();
    //driver.findElement(By.xpath(&quot;//div[2]/button&quot;)).click();
    //driver.findElement(By.id(&quot;consent_ok&quot;)).click();
    //driver.findElement(By.cssSelector(&quot;svg.c-dap-overview-expander-button__icon.c-small-icon&quot;)).click();
    //driver.findElement(By.xpath(&quot;//button[@id=&apos;license__button-agree&apos;]/span&quot;)).click();
  




WDS.sampleResult.sampleStart()

var username = WDS.args[0].split(&apos;,&apos;)[0];
var password = WDS.args[0].split(&apos;,&apos;)[1];

//var userName = WDS.browser.findElement(pkg.By.id(&apos;Login_txtUserName&apos;)).sendKeys([WDS.args[0]])
//var userPwd = WDS.browser.findElement(pkg.By.id(&apos;Login_txtPassword&apos;)).sendKeys([WDS.args[1])


//WDS.log.info(username); 

WDS.browser.get(&quot;https://dev.id.prodigylabs.net&quot;);
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//button[@type=&apos;button&apos;]&quot;)).click();
var timeunit = java.util.concurrent.TimeUnit
WDS.browser.manage().timeouts().implicitlyWait(60, timeunit.SECONDS);
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//img[contains(@src,&apos;https://st-content.stg.verified.me/referenceData/image/brmmenqs9FplPEUj8DoV-JQl5SrytqzTnPKtZJBVFLQ&apos;)]&quot;)).click();
WDS.browser.findElement(org.openqa.selenium.By.id(&quot;userid&quot;)).click();
WDS.browser.findElement(org.openqa.selenium.By.id(&quot;userid&quot;)).clear();
var username = WDS.browser.findElement(org.openqa.selenium.By.id(&quot;userid&quot;)).sendKeys(username);

WDS.browser.findElement(org.openqa.selenium.By.id(&quot;password&quot;)).click();
WDS.browser.findElement(org.openqa.selenium.By.id(&quot;password&quot;)).clear();
var password = WDS.browser.findElement(org.openqa.selenium.By.id(&quot;password&quot;)).sendKeys(password);
WDS.browser.findElement(org.openqa.selenium.By.id(&quot;login&quot;)).click();

//WDS.log.info(WDS.browser.getPageSource());

WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//button[@class=&apos;vme-button clickable vme-button--orange&apos;]&quot;)).click();

WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//button[@id=&apos;consent_ok&apos;]&quot;)).click();
WDS.browser.findElement(org.openqa.selenium.By.cssSelector(&quot;svg.c-dap-overview-expander-button__icon.c-small-icon &gt; use&quot;)).click();
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//button[@id=&apos;license__button-agree&apos;]/span&quot;)).click();

WDS.sampleResult.sampleEnd()


//var searchBox = WDS.browser.findElement(org.openqa.selenium.By.name(&quot;q&quot;));
//searchBox.sendKeys(&quot;automation&quot;);
//searchBox.sendKeys(org.openqa.selenium.Keys.ENTER);
//WDS.browser.findElement(By.name(&quot;q&quot;)).sendKeys(&quot;automation&quot;);
//WDS.browser.findElement(By.id(&quot;tsf&quot;)).submit();</stringProp>
          <stringProp name="WebDriverSampler.parameters">arpi8492@gmail.com,password </stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
